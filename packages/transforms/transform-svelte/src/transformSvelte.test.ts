import { transformSvelte } from './transformSvelte'

test('basic', async () => {
  const api = {}
  const options = {}
  const asset = {
    protocol: 'virtual',
    meta: {
      content: `<h1>hello world</h1>

<style>
h1{
  font-size: 24px;
}
</style>
`,
    },
  }
  const transformed = await transformSvelte(api, options)(asset)
  expect(transformed).toEqual({
    protocol: 'virtual',
    meta: {
      content: `/* generated by Svelte v3.20.1 */
import {
\tSvelteComponent,
\tappend,
\tattr,
\tdetach,
\telement,
\tinit,
\tinsert,
\tnoop,
\tsafe_not_equal
} from "svelte/internal";

function add_css() {
\tvar style = element("style");
\tstyle.id = "svelte-68u2hy-style";
\tstyle.textContent = "h1.svelte-68u2hy{font-size:24px}";
\tappend(document.head, style);
}

function create_fragment(ctx) {
\tlet h1;

\treturn {
\t\tc() {
\t\t\th1 = element("h1");
\t\t\th1.textContent = "hello world";
\t\t\tattr(h1, "class", "svelte-68u2hy");
\t\t},
\t\tm(target, anchor) {
\t\t\tinsert(target, h1, anchor);
\t\t},
\t\tp: noop,
\t\ti: noop,
\t\to: noop,
\t\td(detaching) {
\t\t\tif (detaching) detach(h1);
\t\t}
\t};
}

class Component extends SvelteComponent {
\tconstructor(options) {
\t\tsuper();
\t\tif (!document.getElementById("svelte-68u2hy-style")) add_css();
\t\tinit(this, options, null, create_fragment, safe_not_equal, {});
\t}
}

export default Component;`,
      sourceMap: {
        mappings: ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;',
        names: [],
        sources: [null],
        sourcesContent: [
          `<h1>hello world</h1>

<style>
h1{
  font-size: 24px;
}
</style>
`,
        ],
        version: 3,
      },
    },
  })
})
